extends layout

block content
    #map
    style.
        html, body {
            height: 100%;
            overflow: hidden;
        }
        #map{
            width: 100%;
            height: 100%;
        }
    script.
        var hash = location.hash.substr(1);
        var user_id = hash.substr(hash.indexOf('user_id=')).split('&')[0].split('=')[1];
        var room_id = hash.substr(hash.indexOf('room_id=')).split('&')[0].split('=')[1];

        //- var colors = ['#009688','#8bc34a','#f44336','#ffc107','#ff5722','#9e9e9e','#e91e63','#9c27b0','#673ab7','#3f51b5'];
        var colors = ['#ff0000', '#004eff', '#57e13c', '#b49c69', '#fff600', '#00fff6'];
        var start;
        var currents = {};

        var position = new naver.maps.LatLng(37.5078074, 127.0451858);

        var map = new naver.maps.Map('map', {
            center: position,
            zoom: 12
        });

        var paths = [];
        var pathsData = [];

        var socket = io.connect('http://goline.heek.kr:8081');

        socket.on('init', function(data){
            console.log(data);

            // THIS_IS_EXAMPLE_LOCATION
            // TODO: apply data
            var min_lat = Number(data.bound.latitudeMin);
            var min_lng = Number(data.bound.longitudeMin);
            var max_lat = Number(data.bound.latitudeMax);
            var max_lng = Number(data.bound.longitudeMax);
            var bounds = new naver.maps.LatLngBounds(
                new naver.maps.LatLng(min_lat, min_lng),
                new naver.maps.LatLng(max_lat, max_lng)
            );
            map.fitBounds(bounds);

            for (i=0; i<data.paths.length; i++) {
                var dd = data.paths[i];
                var color = colors.pop();

                paths[dd.userId] = new naver.maps.Polyline({
                    map: map,
                    path: [],
                    strokeColor: color,
                    strokeWeight: 2
                });
                pathsData[dd.userId] = [];
                for (j=0; j<dd.path.length; j++) {
                    var pp = dd.path[j];
                    var pos = new naver.maps.LatLng(pp['latitude'], pp['longitude']);
                    var path = paths[dd.userId].getPath();
                    path.push(pos);
                    pathsData[dd.userId].push(pos);
                }
                currents[dd.userId] = new naver.maps.Circle({
                    map: map,
                    center: pos,
                    radius: 5,
                    fillColor: color,
                    fillOpacity: 0.8
                });
                continue;
            }
        });

        socket.on('update', function(data){
            var userId = data.userId;

            var pos = new naver.maps.LatLng(data.pos['latitude'], data.pos['longitude']);

            var color = colors.pop();

            if (paths[userId]==undefined) {
                console.log('create new path');
                paths[userId] = new naver.maps.Polyline({
                    map: map,
                    path: [],
                    strokeColor: color,
                    strokeWeight: 2
                });
                pathsData[userId] = [];

                if (userId == user_id) {
                    start = new naver.maps.Marker({
                        position: pos,
                        map: map
                    });
                }

                currents[userId] = new naver.maps.Circle({
                    map: map,
                    center: pos,
                    radius: 5,
                    fillColor: color,
                    fillOpacity: 0.75
                });
            }

            var path = paths[userId].getPath();
            path.push(pos);
            pathsData[userId].push(pos);

            currents[userId].setCenter(pos);
        });

        socket.on('end', function(data){
            var userId = data.userId;
            var polyline = paths[userId];
            var color = polyline.strokeColor;
            polyline.setMap(null);

            var polygon = new naver.maps.Polygon({
                map: map,
                paths: [[]],
                fillColor: color,
                fillOpacity: 0.3,
                strokeColor: color,
                strokeOpacity: 0.6,
                strokeWeight: 3,
                clikable: true
            });

            var polypath = polygon.getPaths().getAt(0);
            for (i in pathsData[userId]) {
                polypath.push(pathsData[userId][i]);
            }

            paths[userId] = polygon;

            if (userId == user_id) {
                var score = polygon.getAreaSize();
                if (!score) score = 0;
                socket.emit('end', {'score': score, 'userId': user_id});

                setInterval(function(){socket.emit('getScore');}, 1000);
            }
        });

        socket.emit('init', {roomId: room_id});